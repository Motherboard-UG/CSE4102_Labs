// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array memory;
	static Array freeList;
	static Array EOList;

	// Free block structure
		// .FL_length : size of obj inclusive of the two attributes
		// .FL_next : next free obj (block) address.
	// alloc block structure
		// alloc block can be inside a free block
		// size: size of alloc block including 1 header word
		// size allocated


	static int FL_length; // length of free list
	static int FL_next; // next index of freelist header 
	
	static int ALLOC_SIZE;

    /** Initializes the class. */
    function void init() {
		let memory = 0;
		// memoryBase = 2048
		// memoryMax = 16384
		let freeList = 2048;
		let EOList = 16384; // End of memory/ list.
		let FL_length = 0;
		let FL_next = -1;
		let ALLOC_SIZE = -1;
		let freeList[FL_length] = 16384 - 2048;
		let freeList[FL_next] = null;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array prevNode;
		var Array currentNode;
		
		let prevNode  = Memory.bestFit( size );

		if ( prevNode = null){
			let currentNode = null;
		} else {
			if (prevNode = null) {
				let currentNode = freeList;
				let freeList = Memory.allocate(currentNode, size);
			} else {
				let currentNode = prevNode[FL_next];
				let prevNode[FL_next]  = Memory.allocate(currentNode, size);
			}
		}
		return currentNode + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int allocsize;
		var Array nextBlock, prevBlock, block;

		let allocsize = o[ALLOC_SIZE];
		let o = o - 1;
		
		let block = freeList;
		if( o < freeList){
			let block = null;
		} else {
			while ( ~( block[FL_next] = null ) & ( block[FL_next] < o)){
				let block = block[FL_next];	
			}
		}

		let prevBlock = block;

		if ( prevBlock = null) {
			let o[FL_length] = allocsize;
			let o[FL_next] = freeList;
			let freeList = o;
			let prevBlock = o;
		} else {
			if( ( prevBlock + prevBlock[FL_length]) = o) {
				let prevBlock[FL_length] = prevBlock[FL_length] + allocsize;
			} else {
					let o[FL_length] = allocsize;
					let o[FL_next] = prevBlock[FL_next];
					let prevBlock[FL_next] = o;
					let prevBlock = o;
			}
		}

		if ( ( prevBlock + prevBlock[FL_length])  = prevBlock[FL_next]) {
			let nextBlock = prevBlock[FL_next];
			let prevBlock[FL_length] = prevBlock[FL_length] +	nextBlock[FL_length];
			let prevBlock[FL_next] = nextBlock[FL_next];
		}
		return;
    }    

	function Array bestFit( int size) {
		var Array best, prev, curr;
		var int currsize, bestsize;

		let best = EOList;
		let bestsize = 0;
		let curr = freeList;
		let prev = null;

		while ( ~( curr = null ) ){
			let currsize = curr[FL_length] - 1;
			
			if ( ~( currsize < size)  &  ( currsize < bestsize) ) {
				let best = prev;
				let bestsize = currsize;
			}
			let  prev = curr;
			let curr = curr[FL_next];
		}
		return best;
	}

	function Array allocate( Array currentNode, int size){
		var Array nextNode;
		var int blocksize;
		if ( currentNode[FL_next] > ( size + 1 + 2)) {
			let nextNode = currentNode + size + 1;
			let nextNode[FL_next] = currentNode[FL_next];
			let nextNode[FL_length] = currentNode[FL_length] - ( nextNode - currentNode);
			let currentNode = currentNode +1;
			let currentNode[ALLOC_SIZE] = size + 1;
		} else {
			let nextNode = currentNode[FL_next];
			let blocksize = currentNode[FL_length];
			let currentNode = currentNode + 1;
			let currentNode[ALLOC_SIZE] = blocksize;
		}
		return nextNode;
	}
}
