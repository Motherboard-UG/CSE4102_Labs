// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static Array screen;
	static boolean cur_colour;
	static int white_pixel;
	static int black_pixel;
	static boolean white;
	static boolean black;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let white = false;
		let black = true;
		let white_pixel = 0;
		let black_pixel = 1;
		let cur_colour = black;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		let i = 0;
		while( i < 8192 ) {
			let screen[i] = white;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let cur_colour = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, value;
		let address = (32 * y) + Math.divide(x , 16);
		
		let value = Math.powerOfTwo(x & 15);
		
		if (color) {
			let screen[address] = screen[address] | value;
		} else {
			let screen[address] = screen[address] & ~value;
		}

		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx, dy, initX, initY, i, j, prop;
	
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		let initX = Math.min( x1, x2 );
		let initY = Math.min( y1, y2 );

		// draw diagnol lines 
		if ( ( (dx < 0) & (dy > 0) ) | ( ( dx > 0) & ( dy < 0 ) ) ) {
			if ( dy < 0 ) {
				do Screen.drawDiagonalLine(x1, y1, dx, dy);
			} else {
				if ( dx < 0) {
				do Screen.drawDiagonalLine(x2, y2, -dx, -dy);
				}
				else{
				do Screen.drawDiagonalLine(x1, y1, dx, -dy);
				}
			}
		return;

		} else {
			let dx = Math.abs( dx );
			let dy = Math.abs( dy );
		}

		// when dy = 0 its a vertical line

		if ( dy = 0 ){
			do Screen.drawHorizontalLine(initX, initY, dx);
			return;
		}
		
		//when dx = 0 it's a horizontal line
		
		if ( dx = 0 ){
			do Screen.drawVerticalLine(initX, initY, dy);
			return;
		}
	
		let i = 0;
		let j = 0;
		
		let prop = 0;
		
		while( ~(i > dx) & ~(j > dy)) {
			do Screen.drawPixel(initX + i, initY + j);
			// prop is used for optimization of slope
			// if prop is positive it mmeans our line have to be drawn a little higher.			
			if (prop < 0) {
				let i = i + 1;
				let prop = prop + dy;
			} else {
				let j = j + 1;
				let prop = prop - dx;
			}

		}
		return;
    }

	function void drawVerticalLine(int x, int y, int l){
		var int d; 
		let d = 0;

		while ( ~( d > l)){
			do Screen.drawPixel( x , (y+d) );
			let d = d+1;
		}
		return;
	}

	function void drawHorizontalLine(int x, int y, int  l){
		var int d;
		let d = 0;

		while ( ~( d > l) ){
			do Screen.drawPixel( (x+d) , y);
			let d = d + 1;
		}
		return;
	}

	function void drawDiagonalLine(int x1, int y1, int dx, int dy){
		var int pr , i, j;
    	let pr = 0;
    	let i = 0;
    	let j = 0;
    	while ((~(i > dx)) & (~(j < dy))) {
    		do Screen.drawPixel(x1 + i, y1 + j);
    		if (pr < 0) {
    			let j = j - 1;
    			let pr = pr + dx;
    		} else {
    			let i = i + 1;
    			let pr = pr + dy;
    		}
    	}
		return;
	}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int dx, dy, initX, initY, i;
		
		let dx = Math.abs( x2 - x1);
		let dy = Math.abs( y2 - y1);
		
		let initX = Math.min( x1, x2);
		let initY = Math.min( y1, y2);

		let i = 0;
		while( i < dy ) {
			do Screen.drawHorizontalLine(initX, initY+i, dx);
			let i = i + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		var int length;

		let dy = -r;

		while( ~(dy > r)) {
			let length = Math.sqrt( (r * r) - (dy * dy)); //pythogeras theorem
			do Screen.drawHorizontalLine(x - length, y + dy, 2 * length);
			let dy = dy + 1;
		}
		return;
    }
}
